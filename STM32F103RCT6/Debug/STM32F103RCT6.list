
STM32F103RCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014ec  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080016d0  080016d0  000116d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001700  08001700  00011700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  2000000c  08001710  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000006c  08001710  0002006c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004f86  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001263  00000000  00000000  00024fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005f8  00000000  00000000  00026220  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000540  00000000  00000000  00026818  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002b37  00000000  00000000  00026d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001c16  00000000  00000000  0002988f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002b4a5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001644  00000000  00000000  0002b524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080016b8 	.word	0x080016b8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080016b8 	.word	0x080016b8

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f927 	bl	8000488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f001 f8e2 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f931 	bl	80004d6 <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f907 	bl	800049e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000008 	.word	0x20000008
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	20000028 	.word	0x20000028

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000028 	.word	0x20000028

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad2      	subs	r2, r2, r3
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d3f7      	bcc.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <__NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	6039      	str	r1, [r7, #0]
 800039a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	db0a      	blt.n	80003ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a4:	490d      	ldr	r1, [pc, #52]	; (80003dc <__NVIC_SetPriority+0x4c>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	683a      	ldr	r2, [r7, #0]
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	0112      	lsls	r2, r2, #4
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	440b      	add	r3, r1
 80003b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003b8:	e00a      	b.n	80003d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	4909      	ldr	r1, [pc, #36]	; (80003e0 <__NVIC_SetPriority+0x50>)
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	f003 030f 	and.w	r3, r3, #15
 80003c2:	3b04      	subs	r3, #4
 80003c4:	683a      	ldr	r2, [r7, #0]
 80003c6:	b2d2      	uxtb	r2, r2
 80003c8:	0112      	lsls	r2, r2, #4
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	440b      	add	r3, r1
 80003ce:	761a      	strb	r2, [r3, #24]
}
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bc80      	pop	{r7}
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000e100 	.word	0xe000e100
 80003e0:	e000ed00 	.word	0xe000ed00

080003e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b089      	sub	sp, #36	; 0x24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	60f8      	str	r0, [r7, #12]
 80003ec:	60b9      	str	r1, [r7, #8]
 80003ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f003 0307 	and.w	r3, r3, #7
 80003f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	f1c3 0307 	rsb	r3, r3, #7
 80003fe:	2b04      	cmp	r3, #4
 8000400:	bf28      	it	cs
 8000402:	2304      	movcs	r3, #4
 8000404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000406:	69fb      	ldr	r3, [r7, #28]
 8000408:	3304      	adds	r3, #4
 800040a:	2b06      	cmp	r3, #6
 800040c:	d902      	bls.n	8000414 <NVIC_EncodePriority+0x30>
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3b03      	subs	r3, #3
 8000412:	e000      	b.n	8000416 <NVIC_EncodePriority+0x32>
 8000414:	2300      	movs	r3, #0
 8000416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000418:	2201      	movs	r2, #1
 800041a:	69bb      	ldr	r3, [r7, #24]
 800041c:	fa02 f303 	lsl.w	r3, r2, r3
 8000420:	1e5a      	subs	r2, r3, #1
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	401a      	ands	r2, r3
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800042a:	2101      	movs	r1, #1
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	fa01 f303 	lsl.w	r3, r1, r3
 8000432:	1e59      	subs	r1, r3, #1
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	4313      	orrs	r3, r2
         );
}
 800043a:	4618      	mov	r0, r3
 800043c:	3724      	adds	r7, #36	; 0x24
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3b01      	subs	r3, #1
 8000450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000454:	d301      	bcc.n	800045a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000456:	2301      	movs	r3, #1
 8000458:	e00f      	b.n	800047a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800045a:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <SysTick_Config+0x40>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000462:	210f      	movs	r1, #15
 8000464:	f04f 30ff 	mov.w	r0, #4294967295
 8000468:	f7ff ff92 	bl	8000390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <SysTick_Config+0x40>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000472:	4b04      	ldr	r3, [pc, #16]	; (8000484 <SysTick_Config+0x40>)
 8000474:	2207      	movs	r2, #7
 8000476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	e000e010 	.word	0xe000e010

08000488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000490:	6878      	ldr	r0, [r7, #4]
 8000492:	f7ff ff4b 	bl	800032c <__NVIC_SetPriorityGrouping>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800049e:	b580      	push	{r7, lr}
 80004a0:	b086      	sub	sp, #24
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	4603      	mov	r3, r0
 80004a6:	60b9      	str	r1, [r7, #8]
 80004a8:	607a      	str	r2, [r7, #4]
 80004aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004b0:	f7ff ff60 	bl	8000374 <__NVIC_GetPriorityGrouping>
 80004b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	68b9      	ldr	r1, [r7, #8]
 80004ba:	6978      	ldr	r0, [r7, #20]
 80004bc:	f7ff ff92 	bl	80003e4 <NVIC_EncodePriority>
 80004c0:	4602      	mov	r2, r0
 80004c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f7ff ff61 	bl	8000390 <__NVIC_SetPriority>
}
 80004ce:	bf00      	nop
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b082      	sub	sp, #8
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004de:	6878      	ldr	r0, [r7, #4]
 80004e0:	f7ff ffb0 	bl	8000444 <SysTick_Config>
 80004e4:	4603      	mov	r3, r0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b08b      	sub	sp, #44	; 0x2c
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80004fa:	2300      	movs	r3, #0
 80004fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80004fe:	2300      	movs	r3, #0
 8000500:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000502:	e133      	b.n	800076c <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000504:	2201      	movs	r2, #1
 8000506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000508:	fa02 f303 	lsl.w	r3, r2, r3
 800050c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	69fb      	ldr	r3, [r7, #28]
 8000514:	4013      	ands	r3, r2
 8000516:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000518:	69ba      	ldr	r2, [r7, #24]
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	429a      	cmp	r2, r3
 800051e:	f040 8122 	bne.w	8000766 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	2b12      	cmp	r3, #18
 8000528:	d034      	beq.n	8000594 <HAL_GPIO_Init+0xa4>
 800052a:	2b12      	cmp	r3, #18
 800052c:	d80d      	bhi.n	800054a <HAL_GPIO_Init+0x5a>
 800052e:	2b02      	cmp	r3, #2
 8000530:	d02b      	beq.n	800058a <HAL_GPIO_Init+0x9a>
 8000532:	2b02      	cmp	r3, #2
 8000534:	d804      	bhi.n	8000540 <HAL_GPIO_Init+0x50>
 8000536:	2b00      	cmp	r3, #0
 8000538:	d031      	beq.n	800059e <HAL_GPIO_Init+0xae>
 800053a:	2b01      	cmp	r3, #1
 800053c:	d01c      	beq.n	8000578 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800053e:	e048      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000540:	2b03      	cmp	r3, #3
 8000542:	d043      	beq.n	80005cc <HAL_GPIO_Init+0xdc>
 8000544:	2b11      	cmp	r3, #17
 8000546:	d01b      	beq.n	8000580 <HAL_GPIO_Init+0x90>
          break;
 8000548:	e043      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800054a:	4a8f      	ldr	r2, [pc, #572]	; (8000788 <HAL_GPIO_Init+0x298>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d026      	beq.n	800059e <HAL_GPIO_Init+0xae>
 8000550:	4a8d      	ldr	r2, [pc, #564]	; (8000788 <HAL_GPIO_Init+0x298>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d806      	bhi.n	8000564 <HAL_GPIO_Init+0x74>
 8000556:	4a8d      	ldr	r2, [pc, #564]	; (800078c <HAL_GPIO_Init+0x29c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d020      	beq.n	800059e <HAL_GPIO_Init+0xae>
 800055c:	4a8c      	ldr	r2, [pc, #560]	; (8000790 <HAL_GPIO_Init+0x2a0>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d01d      	beq.n	800059e <HAL_GPIO_Init+0xae>
          break;
 8000562:	e036      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000564:	4a8b      	ldr	r2, [pc, #556]	; (8000794 <HAL_GPIO_Init+0x2a4>)
 8000566:	4293      	cmp	r3, r2
 8000568:	d019      	beq.n	800059e <HAL_GPIO_Init+0xae>
 800056a:	4a8b      	ldr	r2, [pc, #556]	; (8000798 <HAL_GPIO_Init+0x2a8>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d016      	beq.n	800059e <HAL_GPIO_Init+0xae>
 8000570:	4a8a      	ldr	r2, [pc, #552]	; (800079c <HAL_GPIO_Init+0x2ac>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d013      	beq.n	800059e <HAL_GPIO_Init+0xae>
          break;
 8000576:	e02c      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	623b      	str	r3, [r7, #32]
          break;
 800057e:	e028      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	3304      	adds	r3, #4
 8000586:	623b      	str	r3, [r7, #32]
          break;
 8000588:	e023      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	3308      	adds	r3, #8
 8000590:	623b      	str	r3, [r7, #32]
          break;
 8000592:	e01e      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	330c      	adds	r3, #12
 800059a:	623b      	str	r3, [r7, #32]
          break;
 800059c:	e019      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d102      	bne.n	80005ac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80005a6:	2304      	movs	r3, #4
 80005a8:	623b      	str	r3, [r7, #32]
          break;
 80005aa:	e012      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d105      	bne.n	80005c0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005b4:	2308      	movs	r3, #8
 80005b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	69fa      	ldr	r2, [r7, #28]
 80005bc:	611a      	str	r2, [r3, #16]
          break;
 80005be:	e008      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80005c0:	2308      	movs	r3, #8
 80005c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	69fa      	ldr	r2, [r7, #28]
 80005c8:	615a      	str	r2, [r3, #20]
          break;
 80005ca:	e002      	b.n	80005d2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80005cc:	2300      	movs	r3, #0
 80005ce:	623b      	str	r3, [r7, #32]
          break;
 80005d0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	2bff      	cmp	r3, #255	; 0xff
 80005d6:	d801      	bhi.n	80005dc <HAL_GPIO_Init+0xec>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	e001      	b.n	80005e0 <HAL_GPIO_Init+0xf0>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3304      	adds	r3, #4
 80005e0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80005e2:	69bb      	ldr	r3, [r7, #24]
 80005e4:	2bff      	cmp	r3, #255	; 0xff
 80005e6:	d802      	bhi.n	80005ee <HAL_GPIO_Init+0xfe>
 80005e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	e002      	b.n	80005f4 <HAL_GPIO_Init+0x104>
 80005ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f0:	3b08      	subs	r3, #8
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	210f      	movs	r1, #15
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	43db      	mvns	r3, r3
 8000604:	401a      	ands	r2, r3
 8000606:	6a39      	ldr	r1, [r7, #32]
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	fa01 f303 	lsl.w	r3, r1, r3
 800060e:	431a      	orrs	r2, r3
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	685b      	ldr	r3, [r3, #4]
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	2b00      	cmp	r3, #0
 800061e:	f000 80a2 	beq.w	8000766 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000622:	4a5f      	ldr	r2, [pc, #380]	; (80007a0 <HAL_GPIO_Init+0x2b0>)
 8000624:	4b5e      	ldr	r3, [pc, #376]	; (80007a0 <HAL_GPIO_Init+0x2b0>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6193      	str	r3, [r2, #24]
 800062e:	4b5c      	ldr	r3, [pc, #368]	; (80007a0 <HAL_GPIO_Init+0x2b0>)
 8000630:	699b      	ldr	r3, [r3, #24]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800063a:	4a5a      	ldr	r2, [pc, #360]	; (80007a4 <HAL_GPIO_Init+0x2b4>)
 800063c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	3302      	adds	r3, #2
 8000642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000646:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	f003 0303 	and.w	r3, r3, #3
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	220f      	movs	r2, #15
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	43db      	mvns	r3, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4013      	ands	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a51      	ldr	r2, [pc, #324]	; (80007a8 <HAL_GPIO_Init+0x2b8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d01f      	beq.n	80006a6 <HAL_GPIO_Init+0x1b6>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a50      	ldr	r2, [pc, #320]	; (80007ac <HAL_GPIO_Init+0x2bc>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d019      	beq.n	80006a2 <HAL_GPIO_Init+0x1b2>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a4f      	ldr	r2, [pc, #316]	; (80007b0 <HAL_GPIO_Init+0x2c0>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d013      	beq.n	800069e <HAL_GPIO_Init+0x1ae>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a4e      	ldr	r2, [pc, #312]	; (80007b4 <HAL_GPIO_Init+0x2c4>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d00d      	beq.n	800069a <HAL_GPIO_Init+0x1aa>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a4d      	ldr	r2, [pc, #308]	; (80007b8 <HAL_GPIO_Init+0x2c8>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d007      	beq.n	8000696 <HAL_GPIO_Init+0x1a6>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a4c      	ldr	r2, [pc, #304]	; (80007bc <HAL_GPIO_Init+0x2cc>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d101      	bne.n	8000692 <HAL_GPIO_Init+0x1a2>
 800068e:	2305      	movs	r3, #5
 8000690:	e00a      	b.n	80006a8 <HAL_GPIO_Init+0x1b8>
 8000692:	2306      	movs	r3, #6
 8000694:	e008      	b.n	80006a8 <HAL_GPIO_Init+0x1b8>
 8000696:	2304      	movs	r3, #4
 8000698:	e006      	b.n	80006a8 <HAL_GPIO_Init+0x1b8>
 800069a:	2303      	movs	r3, #3
 800069c:	e004      	b.n	80006a8 <HAL_GPIO_Init+0x1b8>
 800069e:	2302      	movs	r3, #2
 80006a0:	e002      	b.n	80006a8 <HAL_GPIO_Init+0x1b8>
 80006a2:	2301      	movs	r3, #1
 80006a4:	e000      	b.n	80006a8 <HAL_GPIO_Init+0x1b8>
 80006a6:	2300      	movs	r3, #0
 80006a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006aa:	f002 0203 	and.w	r2, r2, #3
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	4093      	lsls	r3, r2
 80006b2:	68fa      	ldr	r2, [r7, #12]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80006b8:	493a      	ldr	r1, [pc, #232]	; (80007a4 <HAL_GPIO_Init+0x2b4>)
 80006ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006bc:	089b      	lsrs	r3, r3, #2
 80006be:	3302      	adds	r3, #2
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d006      	beq.n	80006e0 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006d2:	493b      	ldr	r1, [pc, #236]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 80006d4:	4b3a      	ldr	r3, [pc, #232]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	4313      	orrs	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]
 80006de:	e006      	b.n	80006ee <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80006e0:	4937      	ldr	r1, [pc, #220]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 80006e2:	4b37      	ldr	r3, [pc, #220]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	69bb      	ldr	r3, [r7, #24]
 80006e8:	43db      	mvns	r3, r3
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d006      	beq.n	8000708 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80006fa:	4931      	ldr	r1, [pc, #196]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 80006fc:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 80006fe:	685a      	ldr	r2, [r3, #4]
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	4313      	orrs	r3, r2
 8000704:	604b      	str	r3, [r1, #4]
 8000706:	e006      	b.n	8000716 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000708:	492d      	ldr	r1, [pc, #180]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 800070a:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	69bb      	ldr	r3, [r7, #24]
 8000710:	43db      	mvns	r3, r3
 8000712:	4013      	ands	r3, r2
 8000714:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	685b      	ldr	r3, [r3, #4]
 800071a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d006      	beq.n	8000730 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000722:	4927      	ldr	r1, [pc, #156]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 8000726:	689a      	ldr	r2, [r3, #8]
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	4313      	orrs	r3, r2
 800072c:	608b      	str	r3, [r1, #8]
 800072e:	e006      	b.n	800073e <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000730:	4923      	ldr	r1, [pc, #140]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 8000734:	689a      	ldr	r2, [r3, #8]
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	43db      	mvns	r3, r3
 800073a:	4013      	ands	r3, r2
 800073c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000746:	2b00      	cmp	r3, #0
 8000748:	d006      	beq.n	8000758 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800074a:	491d      	ldr	r1, [pc, #116]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 800074e:	68da      	ldr	r2, [r3, #12]
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	4313      	orrs	r3, r2
 8000754:	60cb      	str	r3, [r1, #12]
 8000756:	e006      	b.n	8000766 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000758:	4919      	ldr	r1, [pc, #100]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_GPIO_Init+0x2d0>)
 800075c:	68da      	ldr	r2, [r3, #12]
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	43db      	mvns	r3, r3
 8000762:	4013      	ands	r3, r2
 8000764:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000768:	3301      	adds	r3, #1
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	fa22 f303 	lsr.w	r3, r2, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	f47f aec4 	bne.w	8000504 <HAL_GPIO_Init+0x14>
  }
}
 800077c:	bf00      	nop
 800077e:	372c      	adds	r7, #44	; 0x2c
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	10210000 	.word	0x10210000
 800078c:	10110000 	.word	0x10110000
 8000790:	10120000 	.word	0x10120000
 8000794:	10310000 	.word	0x10310000
 8000798:	10320000 	.word	0x10320000
 800079c:	10220000 	.word	0x10220000
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000
 80007a8:	40010800 	.word	0x40010800
 80007ac:	40010c00 	.word	0x40010c00
 80007b0:	40011000 	.word	0x40011000
 80007b4:	40011400 	.word	0x40011400
 80007b8:	40011800 	.word	0x40011800
 80007bc:	40011c00 	.word	0x40011c00
 80007c0:	40010400 	.word	0x40010400

080007c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
 80007d0:	4613      	mov	r3, r2
 80007d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80007d4:	787b      	ldrb	r3, [r7, #1]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d003      	beq.n	80007e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80007da:	887a      	ldrh	r2, [r7, #2]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80007e0:	e003      	b.n	80007ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	041a      	lsls	r2, r3, #16
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	611a      	str	r2, [r3, #16]
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d101      	bne.n	8000806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e26c      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	2b00      	cmp	r3, #0
 8000810:	f000 8087 	beq.w	8000922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000814:	4b92      	ldr	r3, [pc, #584]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	f003 030c 	and.w	r3, r3, #12
 800081c:	2b04      	cmp	r3, #4
 800081e:	d00c      	beq.n	800083a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000820:	4b8f      	ldr	r3, [pc, #572]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 030c 	and.w	r3, r3, #12
 8000828:	2b08      	cmp	r3, #8
 800082a:	d112      	bne.n	8000852 <HAL_RCC_OscConfig+0x5e>
 800082c:	4b8c      	ldr	r3, [pc, #560]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000838:	d10b      	bne.n	8000852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800083a:	4b89      	ldr	r3, [pc, #548]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d06c      	beq.n	8000920 <HAL_RCC_OscConfig+0x12c>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d168      	bne.n	8000920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e246      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800085a:	d106      	bne.n	800086a <HAL_RCC_OscConfig+0x76>
 800085c:	4a80      	ldr	r2, [pc, #512]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 800085e:	4b80      	ldr	r3, [pc, #512]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	e02e      	b.n	80008c8 <HAL_RCC_OscConfig+0xd4>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d10c      	bne.n	800088c <HAL_RCC_OscConfig+0x98>
 8000872:	4a7b      	ldr	r2, [pc, #492]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000874:	4b7a      	ldr	r3, [pc, #488]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800087c:	6013      	str	r3, [r2, #0]
 800087e:	4a78      	ldr	r2, [pc, #480]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000880:	4b77      	ldr	r3, [pc, #476]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000888:	6013      	str	r3, [r2, #0]
 800088a:	e01d      	b.n	80008c8 <HAL_RCC_OscConfig+0xd4>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000894:	d10c      	bne.n	80008b0 <HAL_RCC_OscConfig+0xbc>
 8000896:	4a72      	ldr	r2, [pc, #456]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000898:	4b71      	ldr	r3, [pc, #452]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	4a6f      	ldr	r2, [pc, #444]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80008a4:	4b6e      	ldr	r3, [pc, #440]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e00b      	b.n	80008c8 <HAL_RCC_OscConfig+0xd4>
 80008b0:	4a6b      	ldr	r2, [pc, #428]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80008b2:	4b6b      	ldr	r3, [pc, #428]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	4a68      	ldr	r2, [pc, #416]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80008be:	4b68      	ldr	r3, [pc, #416]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d013      	beq.n	80008f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008d0:	f7ff fd00 	bl	80002d4 <HAL_GetTick>
 80008d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d6:	e008      	b.n	80008ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008d8:	f7ff fcfc 	bl	80002d4 <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	693b      	ldr	r3, [r7, #16]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	2b64      	cmp	r3, #100	; 0x64
 80008e4:	d901      	bls.n	80008ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80008e6:	2303      	movs	r3, #3
 80008e8:	e1fa      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ea:	4b5d      	ldr	r3, [pc, #372]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f0      	beq.n	80008d8 <HAL_RCC_OscConfig+0xe4>
 80008f6:	e014      	b.n	8000922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f8:	f7ff fcec 	bl	80002d4 <HAL_GetTick>
 80008fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008fe:	e008      	b.n	8000912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000900:	f7ff fce8 	bl	80002d4 <HAL_GetTick>
 8000904:	4602      	mov	r2, r0
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	2b64      	cmp	r3, #100	; 0x64
 800090c:	d901      	bls.n	8000912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800090e:	2303      	movs	r3, #3
 8000910:	e1e6      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000912:	4b53      	ldr	r3, [pc, #332]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1f0      	bne.n	8000900 <HAL_RCC_OscConfig+0x10c>
 800091e:	e000      	b.n	8000922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	2b00      	cmp	r3, #0
 800092c:	d063      	beq.n	80009f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800092e:	4b4c      	ldr	r3, [pc, #304]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 030c 	and.w	r3, r3, #12
 8000936:	2b00      	cmp	r3, #0
 8000938:	d00b      	beq.n	8000952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800093a:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f003 030c 	and.w	r3, r3, #12
 8000942:	2b08      	cmp	r3, #8
 8000944:	d11c      	bne.n	8000980 <HAL_RCC_OscConfig+0x18c>
 8000946:	4b46      	ldr	r3, [pc, #280]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d116      	bne.n	8000980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000952:	4b43      	ldr	r3, [pc, #268]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f003 0302 	and.w	r3, r3, #2
 800095a:	2b00      	cmp	r3, #0
 800095c:	d005      	beq.n	800096a <HAL_RCC_OscConfig+0x176>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d001      	beq.n	800096a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	e1ba      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800096a:	493d      	ldr	r1, [pc, #244]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 800096c:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	4313      	orrs	r3, r2
 800097c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800097e:	e03a      	b.n	80009f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d020      	beq.n	80009ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000988:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <HAL_RCC_OscConfig+0x270>)
 800098a:	2201      	movs	r2, #1
 800098c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800098e:	f7ff fca1 	bl	80002d4 <HAL_GetTick>
 8000992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000994:	e008      	b.n	80009a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000996:	f7ff fc9d 	bl	80002d4 <HAL_GetTick>
 800099a:	4602      	mov	r2, r0
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d901      	bls.n	80009a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80009a4:	2303      	movs	r3, #3
 80009a6:	e19b      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0f0      	beq.n	8000996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009b4:	492a      	ldr	r1, [pc, #168]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80009b6:	4b2a      	ldr	r3, [pc, #168]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	600b      	str	r3, [r1, #0]
 80009c8:	e015      	b.n	80009f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <HAL_RCC_OscConfig+0x270>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d0:	f7ff fc80 	bl	80002d4 <HAL_GetTick>
 80009d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009d6:	e008      	b.n	80009ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80009d8:	f7ff fc7c 	bl	80002d4 <HAL_GetTick>
 80009dc:	4602      	mov	r2, r0
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d901      	bls.n	80009ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80009e6:	2303      	movs	r3, #3
 80009e8:	e17a      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1f0      	bne.n	80009d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f003 0308 	and.w	r3, r3, #8
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d03a      	beq.n	8000a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	699b      	ldr	r3, [r3, #24]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d019      	beq.n	8000a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a0a:	4b17      	ldr	r3, [pc, #92]	; (8000a68 <HAL_RCC_OscConfig+0x274>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a10:	f7ff fc60 	bl	80002d4 <HAL_GetTick>
 8000a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a16:	e008      	b.n	8000a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a18:	f7ff fc5c 	bl	80002d4 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b02      	cmp	r3, #2
 8000a24:	d901      	bls.n	8000a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000a26:	2303      	movs	r3, #3
 8000a28:	e15a      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <HAL_RCC_OscConfig+0x26c>)
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d0f0      	beq.n	8000a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000a36:	2001      	movs	r0, #1
 8000a38:	f000 fada 	bl	8000ff0 <RCC_Delay>
 8000a3c:	e01c      	b.n	8000a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <HAL_RCC_OscConfig+0x274>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a44:	f7ff fc46 	bl	80002d4 <HAL_GetTick>
 8000a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a4a:	e00f      	b.n	8000a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a4c:	f7ff fc42 	bl	80002d4 <HAL_GetTick>
 8000a50:	4602      	mov	r2, r0
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d908      	bls.n	8000a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e140      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
 8000a5e:	bf00      	nop
 8000a60:	40021000 	.word	0x40021000
 8000a64:	42420000 	.word	0x42420000
 8000a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6c:	4b9e      	ldr	r3, [pc, #632]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	f003 0302 	and.w	r3, r3, #2
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1e9      	bne.n	8000a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 80a6 	beq.w	8000bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a8a:	4b97      	ldr	r3, [pc, #604]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d10d      	bne.n	8000ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4a94      	ldr	r2, [pc, #592]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000a98:	4b93      	ldr	r3, [pc, #588]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000a9a:	69db      	ldr	r3, [r3, #28]
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	61d3      	str	r3, [r2, #28]
 8000aa2:	4b91      	ldr	r3, [pc, #580]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ab2:	4b8e      	ldr	r3, [pc, #568]	; (8000cec <HAL_RCC_OscConfig+0x4f8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d118      	bne.n	8000af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000abe:	4a8b      	ldr	r2, [pc, #556]	; (8000cec <HAL_RCC_OscConfig+0x4f8>)
 8000ac0:	4b8a      	ldr	r3, [pc, #552]	; (8000cec <HAL_RCC_OscConfig+0x4f8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000aca:	f7ff fc03 	bl	80002d4 <HAL_GetTick>
 8000ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ad0:	e008      	b.n	8000ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ad2:	f7ff fbff 	bl	80002d4 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	2b64      	cmp	r3, #100	; 0x64
 8000ade:	d901      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	e0fd      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ae4:	4b81      	ldr	r3, [pc, #516]	; (8000cec <HAL_RCC_OscConfig+0x4f8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f0      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d106      	bne.n	8000b06 <HAL_RCC_OscConfig+0x312>
 8000af8:	4a7b      	ldr	r2, [pc, #492]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000afa:	4b7b      	ldr	r3, [pc, #492]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000afc:	6a1b      	ldr	r3, [r3, #32]
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6213      	str	r3, [r2, #32]
 8000b04:	e02d      	b.n	8000b62 <HAL_RCC_OscConfig+0x36e>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10c      	bne.n	8000b28 <HAL_RCC_OscConfig+0x334>
 8000b0e:	4a76      	ldr	r2, [pc, #472]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b10:	4b75      	ldr	r3, [pc, #468]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b12:	6a1b      	ldr	r3, [r3, #32]
 8000b14:	f023 0301 	bic.w	r3, r3, #1
 8000b18:	6213      	str	r3, [r2, #32]
 8000b1a:	4a73      	ldr	r2, [pc, #460]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b1c:	4b72      	ldr	r3, [pc, #456]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	f023 0304 	bic.w	r3, r3, #4
 8000b24:	6213      	str	r3, [r2, #32]
 8000b26:	e01c      	b.n	8000b62 <HAL_RCC_OscConfig+0x36e>
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	2b05      	cmp	r3, #5
 8000b2e:	d10c      	bne.n	8000b4a <HAL_RCC_OscConfig+0x356>
 8000b30:	4a6d      	ldr	r2, [pc, #436]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b32:	4b6d      	ldr	r3, [pc, #436]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b34:	6a1b      	ldr	r3, [r3, #32]
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6213      	str	r3, [r2, #32]
 8000b3c:	4a6a      	ldr	r2, [pc, #424]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b3e:	4b6a      	ldr	r3, [pc, #424]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	f043 0301 	orr.w	r3, r3, #1
 8000b46:	6213      	str	r3, [r2, #32]
 8000b48:	e00b      	b.n	8000b62 <HAL_RCC_OscConfig+0x36e>
 8000b4a:	4a67      	ldr	r2, [pc, #412]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b4c:	4b66      	ldr	r3, [pc, #408]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	f023 0301 	bic.w	r3, r3, #1
 8000b54:	6213      	str	r3, [r2, #32]
 8000b56:	4a64      	ldr	r2, [pc, #400]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b58:	4b63      	ldr	r3, [pc, #396]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	f023 0304 	bic.w	r3, r3, #4
 8000b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d015      	beq.n	8000b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b6a:	f7ff fbb3 	bl	80002d4 <HAL_GetTick>
 8000b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b70:	e00a      	b.n	8000b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b72:	f7ff fbaf 	bl	80002d4 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d901      	bls.n	8000b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b84:	2303      	movs	r3, #3
 8000b86:	e0ab      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b88:	4b57      	ldr	r3, [pc, #348]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0ee      	beq.n	8000b72 <HAL_RCC_OscConfig+0x37e>
 8000b94:	e014      	b.n	8000bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b96:	f7ff fb9d 	bl	80002d4 <HAL_GetTick>
 8000b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b9c:	e00a      	b.n	8000bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b9e:	f7ff fb99 	bl	80002d4 <HAL_GetTick>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d901      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e095      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb4:	4b4c      	ldr	r3, [pc, #304]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000bb6:	6a1b      	ldr	r3, [r3, #32]
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d1ee      	bne.n	8000b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d105      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000bc6:	4a48      	ldr	r2, [pc, #288]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000bc8:	4b47      	ldr	r3, [pc, #284]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 8081 	beq.w	8000cde <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bdc:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 030c 	and.w	r3, r3, #12
 8000be4:	2b08      	cmp	r3, #8
 8000be6:	d061      	beq.n	8000cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	69db      	ldr	r3, [r3, #28]
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	d146      	bne.n	8000c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bf0:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <HAL_RCC_OscConfig+0x4fc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf6:	f7ff fb6d 	bl	80002d4 <HAL_GetTick>
 8000bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bfc:	e008      	b.n	8000c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bfe:	f7ff fb69 	bl	80002d4 <HAL_GetTick>
 8000c02:	4602      	mov	r2, r0
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	1ad3      	subs	r3, r2, r3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d901      	bls.n	8000c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	e067      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c10:	4b35      	ldr	r3, [pc, #212]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d1f0      	bne.n	8000bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c24:	d108      	bne.n	8000c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c26:	4930      	ldr	r1, [pc, #192]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000c28:	4b2f      	ldr	r3, [pc, #188]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c38:	482b      	ldr	r0, [pc, #172]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a19      	ldr	r1, [r3, #32]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <HAL_RCC_OscConfig+0x4fc>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c56:	f7ff fb3d 	bl	80002d4 <HAL_GetTick>
 8000c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c5c:	e008      	b.n	8000c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c5e:	f7ff fb39 	bl	80002d4 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	d901      	bls.n	8000c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e037      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d0f0      	beq.n	8000c5e <HAL_RCC_OscConfig+0x46a>
 8000c7c:	e02f      	b.n	8000cde <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <HAL_RCC_OscConfig+0x4fc>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff fb26 	bl	80002d4 <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c8c:	f7ff fb22 	bl	80002d4 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e020      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f0      	bne.n	8000c8c <HAL_RCC_OscConfig+0x498>
 8000caa:	e018      	b.n	8000cde <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	69db      	ldr	r3, [r3, #28]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e013      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <HAL_RCC_OscConfig+0x4f4>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d106      	bne.n	8000cda <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d001      	beq.n	8000cde <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e000      	b.n	8000ce0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40007000 	.word	0x40007000
 8000cf0:	42420060 	.word	0x42420060

08000cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e0d0      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000d08:	4b6a      	ldr	r3, [pc, #424]	; (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0207 	and.w	r2, r3, #7
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d210      	bcs.n	8000d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d16:	4967      	ldr	r1, [pc, #412]	; (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d18:	4b66      	ldr	r3, [pc, #408]	; (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f023 0207 	bic.w	r2, r3, #7
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d26:	4b63      	ldr	r3, [pc, #396]	; (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0207 	and.w	r2, r3, #7
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d001      	beq.n	8000d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e0b8      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d020      	beq.n	8000d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d005      	beq.n	8000d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d50:	4a59      	ldr	r2, [pc, #356]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d52:	4b59      	ldr	r3, [pc, #356]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d005      	beq.n	8000d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d68:	4a53      	ldr	r2, [pc, #332]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6a:	4b53      	ldr	r3, [pc, #332]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d74:	4950      	ldr	r1, [pc, #320]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d76:	4b50      	ldr	r3, [pc, #320]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d040      	beq.n	8000e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d107      	bne.n	8000daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	4b47      	ldr	r3, [pc, #284]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d115      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e07f      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d107      	bne.n	8000dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000db2:	4b41      	ldr	r3, [pc, #260]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d109      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e073      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e06b      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dd2:	4939      	ldr	r1, [pc, #228]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f023 0203 	bic.w	r2, r3, #3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000de4:	f7ff fa76 	bl	80002d4 <HAL_GetTick>
 8000de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dea:	e00a      	b.n	8000e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dec:	f7ff fa72 	bl	80002d4 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e053      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 020c 	and.w	r2, r3, #12
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d1eb      	bne.n	8000dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000e14:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0207 	and.w	r2, r3, #7
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d910      	bls.n	8000e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e22:	4924      	ldr	r1, [pc, #144]	; (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e24:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f023 0207 	bic.w	r2, r3, #7
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f003 0207 	and.w	r2, r3, #7
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d001      	beq.n	8000e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e032      	b.n	8000eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d008      	beq.n	8000e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e50:	4919      	ldr	r1, [pc, #100]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d009      	beq.n	8000e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e6e:	4912      	ldr	r1, [pc, #72]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e82:	f000 f821 	bl	8000ec8 <HAL_RCC_GetSysClockFreq>
 8000e86:	4601      	mov	r1, r0
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	091b      	lsrs	r3, r3, #4
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <HAL_RCC_ClockConfig+0x1c8>)
 8000e94:	5cd3      	ldrb	r3, [r2, r3]
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8000e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff f9d4 	bl	8000250 <HAL_InitTick>

  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40022000 	.word	0x40022000
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	080016e4 	.word	0x080016e4
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000000 	.word	0x20000000

08000ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ec8:	b490      	push	{r4, r7}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000ed0:	1d3c      	adds	r4, r7, #4
 8000ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 030c 	and.w	r3, r3, #12
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	d002      	beq.n	8000f08 <HAL_RCC_GetSysClockFreq+0x40>
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d003      	beq.n	8000f0e <HAL_RCC_GetSysClockFreq+0x46>
 8000f06:	e02d      	b.n	8000f64 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f0a:	623b      	str	r3, [r7, #32]
      break;
 8000f0c:	e02d      	b.n	8000f6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	0c9b      	lsrs	r3, r3, #18
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000f20:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d013      	beq.n	8000f54 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	0c5b      	lsrs	r3, r3, #17
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000f40:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f46:	fb02 f203 	mul.w	r2, r2, r3
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
 8000f52:	e004      	b.n	8000f5e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	623b      	str	r3, [r7, #32]
      break;
 8000f62:	e002      	b.n	8000f6a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000f66:	623b      	str	r3, [r7, #32]
      break;
 8000f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc90      	pop	{r4, r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	080016d0 	.word	0x080016d0
 8000f7c:	080016e0 	.word	0x080016e0
 8000f80:	40021000 	.word	0x40021000
 8000f84:	007a1200 	.word	0x007a1200
 8000f88:	003d0900 	.word	0x003d0900

08000f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <HAL_RCC_GetHCLKFreq+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000fa4:	f7ff fff2 	bl	8000f8c <HAL_RCC_GetHCLKFreq>
 8000fa8:	4601      	mov	r1, r0
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000fb6:	5cd3      	ldrb	r3, [r2, r3]
 8000fb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	080016f4 	.word	0x080016f4

08000fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_RCC_GetHCLKFreq>
 8000fd0:	4601      	mov	r1, r0
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	0adb      	lsrs	r3, r3, #11
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	4a03      	ldr	r2, [pc, #12]	; (8000fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	080016f4 	.word	0x080016f4

08000ff0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <RCC_Delay+0x34>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <RCC_Delay+0x38>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0a5b      	lsrs	r3, r3, #9
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800100c:	bf00      	nop
  }
  while (Delay --);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	60fa      	str	r2, [r7, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1f9      	bne.n	800100c <RCC_Delay+0x1c>
}
 8001018:	bf00      	nop
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	10624dd3 	.word	0x10624dd3

0800102c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d101      	bne.n	800103e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e03f      	b.n	80010be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001044:	b2db      	uxtb	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d106      	bne.n	8001058 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f000 fa92 	bl	800157c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2224      	movs	r2, #36	; 0x24
 800105c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	68d2      	ldr	r2, [r2, #12]
 800106a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800106e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f829 	bl	80010c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	6812      	ldr	r2, [r2, #0]
 800107e:	6912      	ldr	r2, [r2, #16]
 8001080:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001084:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	6952      	ldr	r2, [r2, #20]
 8001090:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001094:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	68d2      	ldr	r2, [r2, #12]
 80010a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2220      	movs	r2, #32
 80010b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2220      	movs	r2, #32
 80010b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80010c8:	b590      	push	{r4, r7, lr}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	6912      	ldr	r2, [r2, #16]
 80010da:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	68d2      	ldr	r2, [r2, #12]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001106:	f023 030c 	bic.w	r3, r3, #12
 800110a:	68f9      	ldr	r1, [r7, #12]
 800110c:	430b      	orrs	r3, r1
 800110e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6812      	ldr	r2, [r2, #0]
 8001118:	6952      	ldr	r2, [r2, #20]
 800111a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6992      	ldr	r2, [r2, #24]
 8001122:	430a      	orrs	r2, r1
 8001124:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a52      	ldr	r2, [pc, #328]	; (8001274 <UART_SetConfig+0x1ac>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d14e      	bne.n	80011ce <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001130:	f7ff ff4a 	bl	8000fc8 <HAL_RCC_GetPCLK2Freq>
 8001134:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6819      	ldr	r1, [r3, #0]
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	4613      	mov	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	4413      	add	r3, r2
 8001142:	009a      	lsls	r2, r3, #2
 8001144:	441a      	add	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001150:	4a49      	ldr	r2, [pc, #292]	; (8001278 <UART_SetConfig+0x1b0>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	0118      	lsls	r0, r3, #4
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	009a      	lsls	r2, r3, #2
 8001164:	441a      	add	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001170:	4b41      	ldr	r3, [pc, #260]	; (8001278 <UART_SetConfig+0x1b0>)
 8001172:	fba3 4302 	umull	r4, r3, r3, r2
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2464      	movs	r4, #100	; 0x64
 800117a:	fb04 f303 	mul.w	r3, r4, r3
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	3332      	adds	r3, #50	; 0x32
 8001184:	4a3c      	ldr	r2, [pc, #240]	; (8001278 <UART_SetConfig+0x1b0>)
 8001186:	fba2 2303 	umull	r2, r3, r2, r3
 800118a:	095b      	lsrs	r3, r3, #5
 800118c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001190:	4418      	add	r0, r3
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	009a      	lsls	r2, r3, #2
 800119c:	441a      	add	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <UART_SetConfig+0x1b0>)
 80011aa:	fba3 4302 	umull	r4, r3, r3, r2
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2464      	movs	r4, #100	; 0x64
 80011b2:	fb04 f303 	mul.w	r3, r4, r3
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	3332      	adds	r3, #50	; 0x32
 80011bc:	4a2e      	ldr	r2, [pc, #184]	; (8001278 <UART_SetConfig+0x1b0>)
 80011be:	fba2 2303 	umull	r2, r3, r2, r3
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	f003 030f 	and.w	r3, r3, #15
 80011c8:	4403      	add	r3, r0
 80011ca:	608b      	str	r3, [r1, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80011cc:	e04d      	b.n	800126a <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80011ce:	f7ff fee7 	bl	8000fa0 <HAL_RCC_GetPCLK1Freq>
 80011d2:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6819      	ldr	r1, [r3, #0]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	009a      	lsls	r2, r3, #2
 80011e2:	441a      	add	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ee:	4a22      	ldr	r2, [pc, #136]	; (8001278 <UART_SetConfig+0x1b0>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	0118      	lsls	r0, r3, #4
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	4613      	mov	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	009a      	lsls	r2, r3, #2
 8001202:	441a      	add	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	fbb2 f2f3 	udiv	r2, r2, r3
 800120e:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <UART_SetConfig+0x1b0>)
 8001210:	fba3 4302 	umull	r4, r3, r3, r2
 8001214:	095b      	lsrs	r3, r3, #5
 8001216:	2464      	movs	r4, #100	; 0x64
 8001218:	fb04 f303 	mul.w	r3, r4, r3
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	011b      	lsls	r3, r3, #4
 8001220:	3332      	adds	r3, #50	; 0x32
 8001222:	4a15      	ldr	r2, [pc, #84]	; (8001278 <UART_SetConfig+0x1b0>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	095b      	lsrs	r3, r3, #5
 800122a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800122e:	4418      	add	r0, r3
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	4613      	mov	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	009a      	lsls	r2, r3, #2
 800123a:	441a      	add	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	fbb2 f2f3 	udiv	r2, r2, r3
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <UART_SetConfig+0x1b0>)
 8001248:	fba3 4302 	umull	r4, r3, r3, r2
 800124c:	095b      	lsrs	r3, r3, #5
 800124e:	2464      	movs	r4, #100	; 0x64
 8001250:	fb04 f303 	mul.w	r3, r4, r3
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	3332      	adds	r3, #50	; 0x32
 800125a:	4a07      	ldr	r2, [pc, #28]	; (8001278 <UART_SetConfig+0x1b0>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	095b      	lsrs	r3, r3, #5
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	4403      	add	r3, r0
 8001268:	608b      	str	r3, [r1, #8]
}
 800126a:	bf00      	nop
 800126c:	3714      	adds	r7, #20
 800126e:	46bd      	mov	sp, r7
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	bf00      	nop
 8001274:	40013800 	.word	0x40013800
 8001278:	51eb851f 	.word	0x51eb851f

0800127c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0310 	add.w	r3, r7, #16
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001290:	4a2d      	ldr	r2, [pc, #180]	; (8001348 <MX_GPIO_Init+0xcc>)
 8001292:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_GPIO_Init+0xcc>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_GPIO_Init+0xcc>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0320 	and.w	r3, r3, #32
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a8:	4a27      	ldr	r2, [pc, #156]	; (8001348 <MX_GPIO_Init+0xcc>)
 80012aa:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_GPIO_Init+0xcc>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_GPIO_Init+0xcc>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	4a21      	ldr	r2, [pc, #132]	; (8001348 <MX_GPIO_Init+0xcc>)
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_GPIO_Init+0xcc>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	f043 0310 	orr.w	r3, r3, #16
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_GPIO_Init+0xcc>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1SCK_Pin|SPI1MISO_Pin, GPIO_PIN_RESET);
 80012d8:	2200      	movs	r2, #0
 80012da:	2160      	movs	r1, #96	; 0x60
 80012dc:	481b      	ldr	r0, [pc, #108]	; (800134c <MX_GPIO_Init+0xd0>)
 80012de:	f7ff fa71 	bl	80007c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1CS_GPIO_Port, SPI1CS_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e8:	4819      	ldr	r0, [pc, #100]	; (8001350 <MX_GPIO_Init+0xd4>)
 80012ea:	f7ff fa6b 	bl	80007c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1SCK_Pin|SPI1MISO_Pin;
 80012ee:	2360      	movs	r3, #96	; 0x60
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2302      	movs	r3, #2
 80012fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	4619      	mov	r1, r3
 8001304:	4811      	ldr	r0, [pc, #68]	; (800134c <MX_GPIO_Init+0xd0>)
 8001306:	f7ff f8f3 	bl	80004f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1MOSI_Pin;
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1MOSI_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4619      	mov	r1, r3
 800131c:	480b      	ldr	r0, [pc, #44]	; (800134c <MX_GPIO_Init+0xd0>)
 800131e:	f7ff f8e7 	bl	80004f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1CS_Pin;
 8001322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1CS_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_GPIO_Init+0xd4>)
 800133c:	f7ff f8d8 	bl	80004f0 <HAL_GPIO_Init>

}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40021000 	.word	0x40021000
 800134c:	40010800 	.word	0x40010800
 8001350:	40011000 	.word	0x40011000

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001358:	f7fe ff64 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135c:	f000 f809 	bl	8001372 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001360:	f7ff ff8c 	bl	800127c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001364:	f000 f8e0 	bl	8001528 <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 8001368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800136c:	f7fe ffbc 	bl	80002e8 <HAL_Delay>
 8001370:	e7fa      	b.n	8001368 <main+0x14>

08001372 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b090      	sub	sp, #64	; 0x40
 8001376:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	2228      	movs	r2, #40	; 0x28
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f991 	bl	80016a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a2:	2301      	movs	r3, #1
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a6:	2302      	movs	r3, #2
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fa1a 	bl	80007f4 <HAL_RCC_OscConfig>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013c6:	f000 f819 	bl	80013fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ca:	230f      	movs	r3, #15
 80013cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ce:	2302      	movs	r3, #2
 80013d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2102      	movs	r1, #2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fc85 	bl	8000cf4 <HAL_RCC_ClockConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013f0:	f000 f804 	bl	80013fc <Error_Handler>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3740      	adds	r7, #64	; 0x40
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <HAL_MspInit+0x5c>)
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_MspInit+0x5c>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6193      	str	r3, [r2, #24]
 800141a:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_MspInit+0x5c>)
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001426:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_MspInit+0x5c>)
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_MspInit+0x5c>)
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001430:	61d3      	str	r3, [r2, #28]
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_MspInit+0x5c>)
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800143e:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_MspInit+0x60>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_MspInit+0x60>)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <HardFault_Handler+0x4>

0800147e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001482:	e7fe      	b.n	8001482 <MemManage_Handler+0x4>

08001484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <BusFault_Handler+0x4>

0800148a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <UsageFault_Handler+0x4>

08001490 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b8:	f7fe fefa 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80014c4:	4a15      	ldr	r2, [pc, #84]	; (800151c <SystemInit+0x5c>)
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <SystemInit+0x5c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80014d0:	4912      	ldr	r1, [pc, #72]	; (800151c <SystemInit+0x5c>)
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <SystemInit+0x5c>)
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <SystemInit+0x60>)
 80014d8:	4013      	ands	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014dc:	4a0f      	ldr	r2, [pc, #60]	; (800151c <SystemInit+0x5c>)
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <SystemInit+0x5c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ec:	4a0b      	ldr	r2, [pc, #44]	; (800151c <SystemInit+0x5c>)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <SystemInit+0x5c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <SystemInit+0x5c>)
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <SystemInit+0x5c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001502:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001504:	4b05      	ldr	r3, [pc, #20]	; (800151c <SystemInit+0x5c>)
 8001506:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800150a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SystemInit+0x64>)
 800150e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001512:	609a      	str	r2, [r3, #8]
#endif 
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	f8ff0000 	.word	0xf8ff0000
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800152e:	4a12      	ldr	r2, [pc, #72]	; (8001578 <MX_USART1_UART_Init+0x50>)
 8001530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001532:	4b10      	ldr	r3, [pc, #64]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_USART1_UART_Init+0x4c>)
 8001560:	f7ff fd64 	bl	800102c <HAL_UART_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800156a:	f7ff ff47 	bl	80013fc <Error_Handler>
  }

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000002c 	.word	0x2000002c
 8001578:	40013800 	.word	0x40013800

0800157c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1c      	ldr	r2, [pc, #112]	; (8001608 <HAL_UART_MspInit+0x8c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d131      	bne.n	8001600 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_UART_MspInit+0x90>)
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_UART_MspInit+0x90>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a6:	6193      	str	r3, [r2, #24]
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_UART_MspInit+0x90>)
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	4a15      	ldr	r2, [pc, #84]	; (800160c <HAL_UART_MspInit+0x90>)
 80015b6:	4b15      	ldr	r3, [pc, #84]	; (800160c <HAL_UART_MspInit+0x90>)
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6193      	str	r3, [r2, #24]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_UART_MspInit+0x90>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	480b      	ldr	r0, [pc, #44]	; (8001610 <HAL_UART_MspInit+0x94>)
 80015e2:	f7fe ff85 	bl	80004f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	4619      	mov	r1, r3
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <HAL_UART_MspInit+0x94>)
 80015fc:	f7fe ff78 	bl	80004f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40013800 	.word	0x40013800
 800160c:	40021000 	.word	0x40021000
 8001610:	40010800 	.word	0x40010800

08001614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001614:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001616:	e003      	b.n	8001620 <LoopCopyDataInit>

08001618 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800161a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800161c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800161e:	3104      	adds	r1, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001620:	480a      	ldr	r0, [pc, #40]	; (800164c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001624:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001626:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001628:	d3f6      	bcc.n	8001618 <CopyDataInit>
  ldr r2, =_sbss
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800162c:	e002      	b.n	8001634 <LoopFillZerobss>

0800162e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800162e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001630:	f842 3b04 	str.w	r3, [r2], #4

08001634 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001636:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001638:	d3f9      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800163a:	f7ff ff41 	bl	80014c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163e:	f000 f80f 	bl	8001660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7ff fe87 	bl	8001354 <main>
  bx lr
 8001646:	4770      	bx	lr
  ldr r3, =_sidata
 8001648:	08001704 	.word	0x08001704
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001650:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001654:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001658:	2000006c 	.word	0x2000006c

0800165c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800165c:	e7fe      	b.n	800165c <ADC1_2_IRQHandler>
	...

08001660 <__libc_init_array>:
 8001660:	b570      	push	{r4, r5, r6, lr}
 8001662:	2500      	movs	r5, #0
 8001664:	4e0c      	ldr	r6, [pc, #48]	; (8001698 <__libc_init_array+0x38>)
 8001666:	4c0d      	ldr	r4, [pc, #52]	; (800169c <__libc_init_array+0x3c>)
 8001668:	1ba4      	subs	r4, r4, r6
 800166a:	10a4      	asrs	r4, r4, #2
 800166c:	42a5      	cmp	r5, r4
 800166e:	d109      	bne.n	8001684 <__libc_init_array+0x24>
 8001670:	f000 f822 	bl	80016b8 <_init>
 8001674:	2500      	movs	r5, #0
 8001676:	4e0a      	ldr	r6, [pc, #40]	; (80016a0 <__libc_init_array+0x40>)
 8001678:	4c0a      	ldr	r4, [pc, #40]	; (80016a4 <__libc_init_array+0x44>)
 800167a:	1ba4      	subs	r4, r4, r6
 800167c:	10a4      	asrs	r4, r4, #2
 800167e:	42a5      	cmp	r5, r4
 8001680:	d105      	bne.n	800168e <__libc_init_array+0x2e>
 8001682:	bd70      	pop	{r4, r5, r6, pc}
 8001684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001688:	4798      	blx	r3
 800168a:	3501      	adds	r5, #1
 800168c:	e7ee      	b.n	800166c <__libc_init_array+0xc>
 800168e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001692:	4798      	blx	r3
 8001694:	3501      	adds	r5, #1
 8001696:	e7f2      	b.n	800167e <__libc_init_array+0x1e>
 8001698:	080016fc 	.word	0x080016fc
 800169c:	080016fc 	.word	0x080016fc
 80016a0:	080016fc 	.word	0x080016fc
 80016a4:	08001700 	.word	0x08001700

080016a8 <memset>:
 80016a8:	4603      	mov	r3, r0
 80016aa:	4402      	add	r2, r0
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d100      	bne.n	80016b2 <memset+0xa>
 80016b0:	4770      	bx	lr
 80016b2:	f803 1b01 	strb.w	r1, [r3], #1
 80016b6:	e7f9      	b.n	80016ac <memset+0x4>

080016b8 <_init>:
 80016b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ba:	bf00      	nop
 80016bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016be:	bc08      	pop	{r3}
 80016c0:	469e      	mov	lr, r3
 80016c2:	4770      	bx	lr

080016c4 <_fini>:
 80016c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016c6:	bf00      	nop
 80016c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ca:	bc08      	pop	{r3}
 80016cc:	469e      	mov	lr, r3
 80016ce:	4770      	bx	lr
